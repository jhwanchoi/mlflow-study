version: '3.8'

services:
  # PostgreSQL - MLflow backend store for metadata
  postgres:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlflow-network

  # MinIO - S3-compatible artifact store
  minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlflow-network

  # MinIO client - Create bucket on startup
  minio-init:
    image: minio/mc:latest
    container_name: mlflow-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minio minio123;
      mc mb myminio/mlflow || true;
      mc policy set download myminio/mlflow;
      exit 0;
      "
    networks:
      - mlflow-network

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
      --default-artifact-root s3://mlflow/artifacts
      --host 0.0.0.0
      --port 5000
      --serve-artifacts
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_S3_IGNORE_TLS: "true"
    ports:
      - "5001:5000"
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlflow-network

  # BentoML Model Serving
  bentoml:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bentoml-server
    command: bentoml serve src.serving.service:VisionClassifier --host 0.0.0.0 --port 3000
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MODEL_RUN_ID: ${MODEL_RUN_ID:-}
      MODEL_NAME: ${MODEL_NAME:-}
      MODEL_VERSION: ${MODEL_VERSION:-latest}
      MODEL_STAGE: ${MODEL_STAGE:-}
      MODEL_ALIAS: ${MODEL_ALIAS:-}
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./checkpoints:/app/checkpoints
    depends_on:
      - mlflow
    networks:
      - mlflow-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  mlflow_data:
    driver: local

networks:
  mlflow-network:
    driver: bridge

name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "=== Before cleanup ==="
          df -h

          # Remove unnecessary software
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Remove more unused tools
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/swift
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          # Clean apt cache
          sudo apt-get clean

          # Clean docker
          sudo docker system prune -af --volumes

          echo "=== After cleanup ==="
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: development
          tags: mlflow-vision-training:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=min  # Use min mode to save space

      - name: Run fast tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/htmlcov:/app/htmlcov \
            -v ${{ github.workspace }}/coverage.xml:/app/coverage.xml \
            mlflow-vision-training:test \
            poetry run pytest tests/ -v -m "not slow" \
              --cov=src \
              --cov-report=html \
              --cov-report=xml \
              --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Run Black (format check)
        run: |
          poetry run black --check src/ tests/

      - name: Run isort (import order check)
        run: |
          poetry run isort --check-only src/ tests/

      - name: Run flake8 (linting)
        run: |
          poetry run flake8 src/ tests/ --max-line-length=100

      - name: Run mypy (type checking)
        run: |
          poetry run mypy src/
        continue-on-error: true  # mypy strict 모드는 점진적 적용

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF results
      actions: read  # Required for Code Scanning

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check_sarif.outputs.exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true  # Don't fail if upload fails
